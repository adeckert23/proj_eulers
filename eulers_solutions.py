import numpy as np
import pandas as pd
from __future__ import division

#Project Euler Problem 1
# If we list all the natural numbers below 10 that are multiples of 3 or 5,
# we get 3, 5, 6 and 9. The sum of these multiples is 23.
#  Find the sum of all the multiples of 3 or 5 below 1000.

def find_the_sum():
    thrives = set()
    for num in range(1000):
        if num % 3==0:
            thrives.add(num)
        if num % 5==0:
            thrives.add(num)
    return sum(thrives)

#ANSWER IS: 233168

# PROBLEM 2
#Each new term in the Fibonacci sequence is generated by adding the previous
#two terms. By starting with 1 and 2, the first 10 terms will be:
#1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#By considering the terms in the Fibonacci sequence whose values do not exceed
# four million, find the sum of the even-valued terms.

def even_fib_sum(maximum= 4000000):
    a,b = 0,1
    total = 0
    while total <= maximum:
        a,b = b, a+b
        if b%2 == 0 and b <= maximum:
            total +=b
    return total

#ANSWER IS: 4613732

# PROBLEM 3
#The prime factors of 13195 are 5, 7, 13 and 29.
#What is the largest prime factor of the number 600851475143 ?

#I used the square root(roughly) of the number 600 billion above, as it is the
#composite number that can be used to find the largest prime factor to make this
#less computationaly expensive

def Prime():
    Primes = []
    for Possible_Prime in range(2,776000):
        IsPrime=True
        for num in range(2,Possible_Prime):
            if Possible_Prime % num ==0:
                IsPrime=False
                break
        if IsPrime:
            Primes.append(Possible_Prime)
    return Primes

plist = Prime()
len(plist)

def find_factor(input=600851475143, prime_list=plist):
    for num in prime_list[::-1]:
        if input%num==0:
            return print(num)
find_factor()
#The Answer is 6857
